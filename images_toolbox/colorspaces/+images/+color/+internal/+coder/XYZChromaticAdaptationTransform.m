function M = XYZChromaticAdaptationTransform(sourceWhitePoint,destinationWhitePoint) %#codegen
%XYZChromaticAdaptationTransform Compute chromatic adaptation transform in
%                                XYZ colorspace
%
%   Return the transform matrix used to adapt an XYZ tristimulous
%   chromatically. The transform depends on a source white and
%   a destination reference white.
%
%   Chromaticity is adapted by scaling the color in the
%   Bradford cone response domain, (rho, gamma, beta).
%
%   sourceWhitePoint and destinationWhitePoint are both 1x3 float vectors.
%   M is a 3x3 matrix of the same type as the input.
%
%   Reference: Chromatic Adaptation, Bruce Lindbloom,
%   www.brucelindbloom.com/index.html?Eqn_ChromAdapt.html

%   Copyright 2015 The MathWorks, Inc.

% Bradford cone response model matrix
Ma = cast( ...
    [0.8951  0.2664 -0.1614
    -0.7502  1.7135  0.0367
     0.0389 -0.0685  1.0296], ...
     'like',sourceWhitePoint);
 
 % Source white point cone response: CRs = Ma * WPs
 srcRho = ...
     Ma(1,1)*sourceWhitePoint(1) + ...
     Ma(1,2)*sourceWhitePoint(2) + ...
     Ma(1,3)*sourceWhitePoint(3);
 srcGam = ...
     Ma(2,1)*sourceWhitePoint(1) + ...
     Ma(2,2)*sourceWhitePoint(2) + ...
     Ma(2,3)*sourceWhitePoint(3);
 srcBet = ...
     Ma(3,1)*sourceWhitePoint(1) + ...
     Ma(3,2)*sourceWhitePoint(2) + ...
     Ma(3,3)*sourceWhitePoint(3);
 
 % Destination white point cone response: CRd = Ma * WPd
 dstRho = ...
     Ma(1,1)*destinationWhitePoint(1) + ...
     Ma(1,2)*destinationWhitePoint(2) + ...
     Ma(1,3)*destinationWhitePoint(3);
 dstGam = ...
     Ma(2,1)*destinationWhitePoint(1) + ...
     Ma(2,2)*destinationWhitePoint(2) + ...
     Ma(2,3)*destinationWhitePoint(3);
 dstBet = ...
     Ma(3,1)*destinationWhitePoint(1) + ...
     Ma(3,2)*destinationWhitePoint(2) + ...
     Ma(3,3)*destinationWhitePoint(3);
 
 % Cone response domain scaling matrix
 S = [ ...
     dstRho/srcRho       0             0      ; ...
           0       dstGam/srcGam       0      ; ...
           0             0       dstBet/srcBet];
 
 % Linear adaptation transform matrix
 M = Ma \ (S * Ma);