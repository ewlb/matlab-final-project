function bw = bwmorph(bwin,op,varargin)
% codegen version of the bwmorph function. See bwmorph for more
% details.

% Copyright 2011-2018 The MathWorks, Inc.

%#codegen
coder.extrinsic('imshow');


%% Input argument parsing
% nargin == 1 will issue a MATLAB error.
if (nargin == 2)
    % No n provided, use default
     n = 1;
elseif(nargin == 3)
    % 3 inputs, take the third
     n = varargin{1};
else    
    eml_invariant(false,...
    eml_message('images:bwmorph:incorrectInputCount'));
end

eml_invariant(eml_is_const(op),...
    eml_message('images:bwmorph:opStringNotConst'));

coder.internal.prefer_const(n);

validateattributes(bwin,...
    {'numeric' 'logical'},...
    {'real' 'nonsparse' '2d'}, ...
    'bwmorph', 'BW', 1);
validateattributes(n,...
    {'numeric'},...
    {'real' 'nonempty' 'scalar'}, ...
    'bwmorph', 'n',2);

validOperations = {'bothat',...
    'branchpoints',...
    'bridge',...
    'clean',...
    'close',...
    'diag',...
    'dilate',...
    'endpoints',...
    'erode',...
    'fatten',...
    'fill',...
    'hbreak',...
    'majority',...
    'perim4',...
    'perim8',...
    'open',...
    'remove',...
    'shrink',...
    'skeleton',...
    'spur',...
    'thicken',...
    'thin',...
    'tophat'};

op = validatestring(op,validOperations, 'bwmorph');

if ~islogical(bwin)
    %> Use logical inputs to bwmorph to remove this loop.
    bw = bwin ~= 0;
else
    bw = bwin;
end

if(isempty(bwin))    
    return;
end

%
%% call core algorithm
bw = images.internal.algbwmorph(bw,op, n);

%
%% Show result if mex code is generated
if (nargout == 0)
    imshow(bw);
end
