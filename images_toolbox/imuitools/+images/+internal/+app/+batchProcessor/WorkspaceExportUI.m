classdef WorkspaceExportUI < images.internal.app.utilities.OkCancelDialog
% Dialog UI Class that manages the workspace export options of the
% imageBatchProcessor 

%   Copyright 2021-2024 The MathWorks, Inc.   
    properties(GetAccess=public, SetAccess=private)
        ResultsToExport = {};
        ResultsType = 'table';
        ResultsVarName = 'allresults';
        IsFileNameExported = false;
    end
    
    % Initial values passed into the UI. The caller passes in these values
    % as the state of the UI is maintained across multiple invocations for
    % the same session. These values are required to bring up the UI with
    % the suitably initial state.
    properties(Access=private)
        AllResultNames;
        InitSelectedResultNames
        InitIsFileNameExported
        ResultsToExportPanel
        OutputTypePanel
        VariableNamePanel
    end
    
    % Handles to UI Elements required for testing
    properties(SetAccess=private, GetAccess=?uitest.factory.Tester)
        ResultsNameChkBox
        IsFileNameToExportChxBox
        OutputTypeRBG
        OutputTypeRB
        VarNameEF
        Tag = 'WorkspaceExportUITag';
    end

    properties(Access=private, Constant)
        DialogSize = [300 350];
        HorizMargin = 5;
        TopMargin = 5;
        InterPanelSpacing = 5;
        SpaceAboveOkBtn = 10;
        VarNamePanelHeight = 50;
        OutputTypePanelHeight = 50;
    end
        
    methods
        function obj = WorkspaceExportUI( dialogStartLoc, ...
                                          allResultNames, initSelectedResultNames, ...
                                          initIsFileNameExported )
            obj@images.internal.app.utilities.OkCancelDialog( dialogStartLoc, ...
                    getString(message('images:imageBatchProcessor:exportToWorkSpace')));
            
            obj.Size = obj.DialogSize;
            
            % Set the initial values
            obj.AllResultNames = allResultNames;
            obj.InitSelectedResultNames = initSelectedResultNames;
            obj.InitIsFileNameExported = initIsFileNameExported;
            
            obj.restoreInitialValues();
            
            obj.createDialog();
        end
    end
    
    methods(Access=protected)
        function okClicked(obj)
            % Identify those results for which the checkbox has been
            % selected and store the variable names.
            obj.ResultsToExport = obj.AllResultNames( ...
                    arrayfun(@(x) x.Value == true, obj.ResultsNameChkBox) );
            
            obj.IsFileNameExported = obj.IsFileNameToExportChxBox.Value;
            
            if contains( obj.OutputTypeRBG.SelectedObject.Tag, 'struct', ...
                         'IgnoreCase', true )
                obj.ResultsType = 'struct';
            else
                obj.ResultsType = 'table';
            end
            
            okClicked@images.internal.app.utilities.OkCancelDialog(obj);
        end
        
        function cancelClicked(obj)
            % When canceling, the updated state must not be retained. The
            % state of the app at the time of creation must be restored.
            restoreInitialValues(obj);
            
            cancelClicked@images.internal.app.utilities.OkCancelDialog(obj);
        end
    end
    
    methods(Access=private)
        function createDialog(obj)
            obj.create();
            
            dialogWidth = obj.DialogSize(1);
            dialogHeight = obj.DialogSize(2);
            
            % If no variables have been selected for export initially, then
            % disable the OK button
            if isempty(obj.InitSelectedResultNames)
                obj.Ok.Enable = 'off';
            end
            
            % There are three panels stacked one on top of the other
            % 1. Results to export
            % 2. Output type
            % 3. Output Variable Name
            
            % Laying out the panels from (3) -> (1)
            
            % Create a UIPanel for Output Variable Name
            varNamePanelPos = [ obj.HorizMargin, ...
                                obj.Ok.Position(2) + obj.Ok.Position(4) + obj.SpaceAboveOkBtn, ...
                                dialogWidth - 2*obj.HorizMargin, ...
                                obj.VarNamePanelHeight ];
            obj.VariableNamePanel = uipanel( obj.FigureHandle, ...
                                'Title', getString(message('images:imageBatchProcessor:enterVariableName')), ...
                                'Position', varNamePanelPos, ...
                                'Tag', 'VariableNamePane', ...
                                'BorderType', 'line', ...
                                'FontName', 'Helvetica', ...
                                'FontSize', 12, ...
                                'FontWeight', 'bold', ...
                                'Visible', 'on' );
            
            % Variable Name specification has an edit field:
            % 1. Edit field
            
            % Add an edit field
            varNameEFPos = [ 5, 5, ...
                             varNamePanelPos(3) - 10, ...
                             obj.VarNamePanelHeight / 2 ];
            obj.VarNameEF = uieditfield( obj.VariableNamePanel, ...
                                    'Position', varNameEFPos, ...
                                    'Value', 'allresults', ...
                                    'HorizontalAlignment', 'left', ...
                                    'FontSize', 12, ...
                                    'FontName','Helvetica', ...
                                    'Editable', true, ...
                                    'Visible', 'on', ...
                                    'Tag', 'VarNameEditField', ...
                                    'ValueChangingFcn', @obj.varNameChanging);
            
            % Create a UI Panel for "Output Type"
            outputTypePanelPos = [ obj.HorizMargin, ...
                                   varNamePanelPos(2) ...
                                            + obj.VarNamePanelHeight ...
                                            + obj.InterPanelSpacing, ...
                                   dialogWidth - 2*obj.HorizMargin, ...
                                   obj.OutputTypePanelHeight ];
            obj.OutputTypePanel = uipanel( obj.FigureHandle, ...
                            'Position', outputTypePanelPos, ...
                            'Title', getString(message('images:imageBatchProcessor:chooseExportVariableType')), ...
                            'Tag', 'OutputTypePanel', ...
                            'FontName', 'Helvetica', ...
                            'FontSize', 12, ...
                            'FontWeight', 'bold', ...
                            'Visible', 'on' );
            
            % Create a Radio Button Group for the output type
            obj.OutputTypeRBG = uibuttongroup( obj.OutputTypePanel, ...
                            'Position', [0 0 outputTypePanelPos(3:4)], ...
                            'Tag', 'OutputTypeRBG', ...
                            'FontName', 'Helvetica', ...
                            'FontSize', 12, ...
                            'BorderType', 'none' );
            
            % Add Radio Buttons do this.
            panelWidth = outputTypePanelPos(3);
            rb1Pos = [ 20 ...
                       5 ...
                       floor(panelWidth/2) - 20 ...
                       obj.OutputTypePanelHeight/2 ];
            obj.OutputTypeRB = uiradiobutton( obj.OutputTypeRBG, ...
                                              'Position', rb1Pos, ...
                                              'Value', true, ...
                                              'Tag', 'OutputTypeTableRB', ...
                                              'Text', getString(message('images:commonUIString:table')) );
            
            rb2Pos = [ floor(panelWidth/2) + 20 ...
                       5 ...
                       floor(panelWidth/2) - 20 ...
                       obj.OutputTypePanelHeight/2 ];
            obj.OutputTypeRB(2) = uiradiobutton( obj.OutputTypeRBG, ...
                                                 'Position', rb2Pos, ...
                                                 'Value', false, ...
                                                 'Tag', 'OutputTypeStructRB', ...
                                                 'Text', getString(message('images:commonUIString:structArray')) );
            
            
            % Create a UIPanel for the "Results to Export"
            resultsToExportStartY = outputTypePanelPos(2) ...
                                        + obj.OutputTypePanelHeight ...
                                        + obj.InterPanelSpacing;
            resultsToExportPanelPos = [ obj.HorizMargin, ...
                                        resultsToExportStartY, ...
                                        dialogWidth - 2*obj.HorizMargin, ...
                                        dialogHeight ...
                                            - resultsToExportStartY ...
                                            - obj.TopMargin ];
            obj.ResultsToExportPanel = uipanel( obj.FigureHandle, ...
                            'Position', resultsToExportPanelPos, ...
                            'Title', getString(message('images:imageBatchProcessor:chooseFieldsToExport')), ...
                            'Tag', 'ResultsToExportPanel', ...
                            'FontName', 'Helvetica', ...
                            'FontSize', 12, ...
                            'FontWeight', 'bold', ...
                            'Visible', 'on' );
            
            % Add checkboxes for each of the fields of the results to be
            % exported + indicate whether file name is to be exported
            numResults = numel(obj.AllResultNames);
            resultsExportUG = uigridlayout( obj.ResultsToExportPanel, ...
                                            [numResults+1 1], ...
                                            'RowHeight', repmat({'fit'}, numResults+1, 1), ...
                                            'Scrollable', 'on' );
            
            % Creating an array to store the checkboxes that are to be
            % created.
            obj.ResultsNameChkBox = gobjects(numResults, 1);
            for cnt = 1:numResults
                resName = obj.AllResultNames{cnt};
                resCB = uicheckbox( resultsExportUG, ...
                                    'Text', resName, ...
                                    'Tag', sprintf('%sTag', resName), ...
                                    'FontSize', 12, ...
                                    'FontName', 'Helvetica', ...
                                    'Value', ismember(resName, obj.InitSelectedResultNames), ...
                                    'ValueChangedFcn', @obj.exportVarSelectionChanged, ...
                                    'Visible', 'on', ...
                                    'Interruptible', 'off' );
                resCB.Layout.Row = cnt;
                resCB.Layout.Column = 1;
                
                obj.ResultsNameChkBox(cnt) = resCB;
            end
            
            % Checkbox to indicate whether file name is to be exported
            obj.IsFileNameToExportChxBox = uicheckbox( resultsExportUG, ...
                            'Text', getString(message('images:imageBatchProcessor:includeInputFileName')), ...
                            'Tag', 'IsFileNameToExportChxBox', ...
                            'FontSize', 12, ...
                            'FontName', 'Helvetica', ...
                            'Value', obj.InitIsFileNameExported, ...
                            'ValueChangedFcn', @obj.exportVarSelectionChanged, ...
                            'Visible', 'on', ...
                            'Interruptible', 'off' );
            obj.IsFileNameToExportChxBox.Layout.Row = numel(obj.AllResultNames)+1;
            obj.IsFileNameToExportChxBox.Layout.Column = 1;
        end
        
        function exportVarSelectionChanged(obj, ~, eventData)
            if eventData.Value == eventData.PreviousValue
                return;
            end
            
            obj.Ok.Enable = obj.IsAnyVarSelectedForExport() && ...
                            isvarname(obj.VarNameEF.Value);
        end
        
        function varNameChanging(obj, ~, eventData)
            % If the variable name specified is not a valid MATLAB Variable
            % name, then change the text colour to RED to indicate an
            % error.
            isValidVarName = isvarname(eventData.Value);
            if ~isValidVarName
                eventData.Source.FontColor = [1 0 0];
            else
                % As valid variable name has been specified, restore the
                % appearance of the edit field.
                obj.ResultsVarName = eventData.Value;
                eventData.Source.FontColor = [0 0 0];
            end
            
            obj.Ok.Enable = obj.IsAnyVarSelectedForExport() && ...
                            isValidVarName;
        end
        
        function isAnySelected = IsAnyVarSelectedForExport(obj)
            % If No variables are selected for export, then keep the OK
            % button disabled 
            isAnySelected = any( arrayfun( @(x) x.Value == true, ...
                                           obj.ResultsNameChkBox ) );
        end
        
        function restoreInitialValues(obj)
            obj.ResultsToExport = obj.InitSelectedResultNames;
            obj.ResultsType = 'table';
            obj.ResultsVarName = 'allresults';
            obj.IsFileNameExported = obj.InitIsFileNameExported;
        end
    end
end