function result = batch<FUNCTION>(source, outDir)
%batch<FUNCTION> Batch process images using <FUNCTION>
% RESULT = batch<FUNCTION>(SOURCE, OUTDIR) processes each file in SOURCE
% using the function <FUNCTION>.
%
% The following fields from the output of <FUNCTION> are written with their
% corresponding file format to the output directory OUTDIR:
<COMMENT_FILEFIELDSWITHFORMAT>
%
% The following fields are returned in the <TABLEORSTRUCTARRAY> RESULT
<COMMENT_WORKSPACEFIELDS>
%
% Auto-generated by imageBatchProcessor app on <DATE>
%----------------------------------------------------------

narginchk(0, 2);

if nargin == 0
    source = "<DEFAULTINPUT>";
    outDir = "";
elseif nargin == 1
    validateattributes( source, ...
                        ["char", "string",  "matlab.io.datastore.ImageDatastore"], {}, ...
                        "batch<FUNCTION>", "source" );
    outDir = "";
else
    outDir = string(outDir);
end

source = convertCharsToStrings(source);

% Fields to place in result
workSpaceFields = {
    <WORKSPACEFIELDS>
    };

% Fields to write out to files. Each entry contains the field name and the
% corresponding file format.
fileFieldsAndFormat = {
    <FILEFIELDSWITHFORMAT>
    };

% If the images are being loaded from a folder, create an imageDatastore 
% to read the input images
if isstring(source)
    isInclSubFolders = <M_IS_RECURSE>;
    inIMDS = createInputReader(source, isInclSubFolders);
else
    inIMDS = copy(source);
    reset(inIMDS);
    inIMDS.ReadSize = 1;
end

inDir = inIMDS.Folders{1};

% Initialize output (as struct array)
result(numel(inIMDS.Files)) = struct();
% Initialize fields with []
for ind =1:numel(workSpaceFields)
    [result.(workSpaceFields{ind})] = deal([]);
end

% Process each image using <FUNCTION>
<PROCESS_IMAGES_SERIAL_OR_PARALLEL>

<STRUCT2TABLEIFNEEDED>

end

function createDirectory(dirname)
% Make output (sub) directory if needed
if exist(dirname, "dir")
    return;
end
[success, message] = mkdir(dirname);
if ~success
    disp("FAILED TO CREATE:" + dirname);
    disp(message);
end
end

function imds = createInputReader(inDir, isRecurse)
% Helper function that creates the datastore to read from folder of images

% All supported extensions
supportedExtns = supportedFormats();

% Create a image data store that can read all these files
imds = imageDatastore(inDir,...
    IncludeSubfolders=isRecurse,...
    FileExtensions=supportedExtns, ...
    ReadFcn = @readImage);

end

function im = readImage(fileName)
% Helper function that reads an image from a file. 
% Returns an empty matrix if there is an error reading the file

try
    im = readAllIPTFormats(fileName);
catch
    im = [];
end
end

<M_GET_ALL_IPT_FORMATS_FUNC>

<M_READ_ALL_IPT_FORMATS_FUNC>

<M_PROCESS_DS_FCN_SIG>
<M_PROCESS_DS_FCN_BODY>
<M_PROCESS_DS_FCN_END>