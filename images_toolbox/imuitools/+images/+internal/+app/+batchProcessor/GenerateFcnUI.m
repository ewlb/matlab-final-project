classdef GenerateFcnUI < images.internal.app.utilities.OkCancelDialog
% Dialog UI Class that manages the options required to generate a MATLAB
% script/function when using the imageBatchProcessor

%   Copyright 2021-2024 The MathWorks, Inc.

    properties(SetAccess=private, GetAccess=public)
        % Specifies the type (struct/table) as which the results exported
        % to the workspace are exported in
        WkspaceExportType = images.internal.app.batchProcessor.GenerateFcnUI.WkspaceExportTypeValues(1);
        
        % A table that tracks the export state of every output generated
        % i.e. workspace vs file. If file, then the format.
        % Table has Nx1 rows, where N is the number of variables to export.
        % RowNames of the table correspond to variable names.
        % Values in the rows correspond to the file formats. If exported to
        % workspace, the value used is 'wkspace'.
        OutputExportSelection
    end
    
    properties(Access=private)
        % Struct containing the results of executing the batch function
        ResultSummaries;
    end
    
    % Handles to UI Elements required for testing
    properties(SetAccess=private, GetAccess=?uitest.factory.Tester)
        OutputTypeRBG
        OutputTypeRB
        OutputTargetDD
        OutputImageTypeDD
        Tag = 'GenerateFcnUITag';
    end
    
    properties(Access=public, Constant)
        WkspaceExportTypeValues = ["table", "struct"];
    end
    
    properties(Access=private, Constant)
        DialogSize = [400 320];
        
        SupportedOutputImageExtns = cellstr(images.internal.app.utilities.supportedWriteFormats());
        
        OutputTargetTagSuffix = 'TargetTag';
        
        OutputTypeTagSuffix = 'OutputTypeTag';
        
        % Defining a few constants for laying out the app
        HorizMargin = 5;
        TopMargin = 5;
        InterPanelSpacing = 10;
        FuncSigPanelHeight = 50;
        OutputTypeSelectPanelHeight = 50;
        SpaceAboveOkBtn = 10;
    end
    
    methods
        function obj = GenerateFcnUI(dialogStartLoc, resultSummaries)
            obj@images.internal.app.utilities.OkCancelDialog( dialogStartLoc, ...
                getString(message('images:imageBatchProcessor:generateFunction')) );
            
            obj.Size = obj.DialogSize;
            
            obj.ResultSummaries = resultSummaries;
            
            % Create the OutputExportSelection table
            resultNames = fieldnames(obj.ResultSummaries);
            numResults = numel(resultNames);
            obj.OutputExportSelection = table( repmat({'wkspace'}, [numResults, 1]), ...
                                    'VariableNames', {'OutputFileTypes'}, ...
                                    'RowNames', resultNames );
            
            obj.createDialog();
        end
    end
    
    methods(Access=protected)
        function okClicked(obj)
            rbValues = [obj.OutputTypeRB.Value];
            obj.WkspaceExportType = ...
                images.internal.app.batchProcessor.GenerateFcnUI.WkspaceExportTypeValues(rbValues);
            
            okClicked@images.internal.app.utilities.OkCancelDialog(obj);
        end
    end
    
    methods(Access=private)
        function createDialog(obj)
            obj.create();
            
            % There are three panels stacked one on top of the other.
            % Function Signature Info Label
            % Output Format Selection
            % Result Fields Selection
            
            dialogWidth = obj.DialogSize(1);
            dialogHeight = obj.DialogSize(2);
            
            % Create a UILABEL with the function signature information
            funcSigLabelPos = [ obj.HorizMargin ...
                                dialogHeight - obj.TopMargin - obj.FuncSigPanelHeight ...
                                dialogWidth - 2*obj.HorizMargin ...
                                obj.FuncSigPanelHeight ];
            
            uilabel( obj.FigureHandle, ...
                     'Position', funcSigLabelPos, ...
                     'Text', getString(message('images:imageBatchProcessor:generatedFunctionSignature')), ...
                     'FontSize', 12, ...
                     'FontName', 'Helvetica', ...
                     'FontWeight', 'bold', ...
                     'WordWrap', 'on', ...
                     'Visible', 'on' );
                 
            % Create a UIPANEL for the output type
            outputTypePanelPos = [ obj.HorizMargin, ...
                                   funcSigLabelPos(2) ...
                                        - obj.InterPanelSpacing ...
                                        - obj.OutputTypeSelectPanelHeight, ...
                                   dialogWidth - 2*obj.HorizMargin, ...
                                   obj.OutputTypeSelectPanelHeight ];
            outputTypePanel = uipanel( obj.FigureHandle, ...
                            'Position', outputTypePanelPos, ...
                            'Title', getString(message('images:imageBatchProcessor:chooseResultType','results')), ...
                            'Tag', 'OutputTypePanel', ...
                            'FontName', 'Helvetica', ...
                            'FontSize', 12, ...
                            'FontWeight', 'bold', ...
                            'Visible', 'on' );
                        
            % Add a Button Group and Radio Buttons to this panel
            obj.OutputTypeRBG = uibuttongroup( outputTypePanel, ...
                                'Position', [0 0 outputTypePanelPos(3:4)], ...
                                'Tag', 'OutputTypeRBG', ...
                                'BorderType', 'none' );
            
            % Add Radio Buttons do this.
            % Radio Button positions are relative to the Radio Button Group
            panelWidth = outputTypePanelPos(3);
            rb1Pos = [ 20 ...
                        5 ...
                        floor(panelWidth/2) - 20 ...
                        obj.OutputTypeSelectPanelHeight/2 ];
            obj.OutputTypeRB = uiradiobutton( obj.OutputTypeRBG, ...
                                   'Position', rb1Pos, ...
                                   'Value', true, ...
                                   'Tag', 'OutputTypeTableRB', ...
                                   'Text', getString(message('images:commonUIString:table')) );
                            
            rb2Pos = [ floor(panelWidth/2) + 20 ...
                       5 ...
                       floor(panelWidth/2) - 20 ...
                       obj.OutputTypeSelectPanelHeight/2 ];
            obj.OutputTypeRB(2) = uiradiobutton( obj.OutputTypeRBG, ...
                                       'Position', rb2Pos, ...
                                       'Value', false, ...
                                       'Tag', 'OutputTypeStructRB', ...
                                       'Text', getString(message('images:commonUIString:structArray')) );
            
            % Add UIPanel to Configure the Result Fields
            % FieldName    | Target    | Format 
            % VarNameLbl1  | DropDown  | DropDown
            % VarNameLbl2  | DropDown  | DropDown
            % VarNameLbl3  | DropDown  | DropDown
            % ...
            resultsPanelStartY = obj.Ok.Position(2) + obj.Ok.Position(4) + obj.SpaceAboveOkBtn; 
            resultsPanelPos = [ obj.HorizMargin, ...
                                resultsPanelStartY, ...
                                dialogWidth - 2*obj.HorizMargin, ...
                                outputTypePanelPos(2) - obj.InterPanelSpacing - resultsPanelStartY];
                                
            resultsConfigPanel = uipanel( obj.FigureHandle, ...
                            'Position', resultsPanelPos, ...
                            'Title', getString(message('images:imageBatchProcessor:assignFieldsTo')), ...
                            'Tag', 'ResultsConfigPanel', ...
                            'FontName', 'Helvetica', ...
                            'FontSize', 12, ...
                            'FontWeight', 'bold', ...
                            'Scrollable', 'on', ...
                            'Visible', 'on' );
                        
            resultNames = fieldnames(obj.ResultSummaries);
            numResults = numel(resultNames);
            resultsConfigUG = uigridlayout( resultsConfigPanel, ...
                                            [numResults+1 3], ...
                                            'RowHeight', repmat({'fit'}, numResults+1, 1), ...
                                            'ColumnWidth', {'2x', '2x', '1x'}, ...
                                            'Padding', [2 2 2 2], ...
                                            'Scrollable', 'on' );
            
            % Add the header labels for the columns
            fieldLabel = uilabel( resultsConfigUG, ...
                            'Text', getString(message('images:commonUIString:field')), ...
                            'HorizontalAlignment', 'left', ...
                            'FontSize', 12, ...
                            'FontName', 'Helvetica', ...
                            'FontWeight', 'bold', ...
                            'Tag', 'FieldLabel', ...
                            'Visible', 'on' );
            fieldLabel.Layout.Row = 1;
            fieldLabel.Layout.Column = 1;
            
            targetLabel = uilabel( resultsConfigUG, ...
                            'Text', getString(message('images:imageBatchProcessor:target')), ...
                            'HorizontalAlignment', 'center', ...
                            'FontSize', 12, ...
                            'FontName', 'Helvetica', ...
                            'FontWeight', 'bold', ...
                            'Tag', 'TargetLabel', ...
                            'Visible', 'on' );
            targetLabel.Layout.Row = 1;
            targetLabel.Layout.Column = 2;
            
            formatLabel = uilabel( resultsConfigUG, ...
                            'Text', getString(message('images:imageBatchProcessor:format')), ...
                            'HorizontalAlignment', 'center', ...
                            'FontSize', 12, ...
                            'FontName', 'Helvetica', ...
                            'FontWeight', 'bold', ...
                            'Tag', 'TargetLabel', ...
                            'Visible', 'on' );
            formatLabel.Layout.Row = 1;
            formatLabel.Layout.Column = 3;
            
            % Populate the DropDown elements for each variable i.e. along
            % the row
            
            % Creating an array to store the checkboxes that are to be
            % created.
            obj.OutputTargetDD = gobjects(numResults, 1);
            obj.OutputImageTypeDD = gobjects(numResults, 1);
            for cnt = 1:numResults
                currResultName = resultNames{cnt};
                currResult = obj.ResultSummaries.(currResultName);
                isCurrResultImage = images.internal.app.batchProcessor.isImage(currResult);
                
                % Add the FieldName UILabel
                varNameLbl = uilabel( resultsConfigUG, ...
                                       'Text', currResultName, ...
                                       'FontName', 'Helvetica', ...
                                       'HorizontalAlignment', 'left', ...
                                       'FontSize', 12, ...
                                       'Tag', sprintf('%sLabelTag', currResultName), ...
                                       'Visible', 'on' );
                 varNameLbl.Layout.Row = cnt+1;
                 varNameLbl.Layout.Column = 1;
                
                % Add the Output Target UI Drop Down
                targetDDValue = 1;
                if isCurrResultImage
                    targetDDValue = 2;
                    obj.OutputExportSelection.OutputFileTypes{currResultName} = 'tiff';
                end
                targetDD = uidropdown( resultsConfigUG, ...
                                'Items', { getString(message('images:imageBatchProcessor:assignTo')), ...
                                           getString(message('images:imageBatchProcessor:sendTo')) }, ...
                                'ItemsData', [1 2], ...
                                'Value', targetDDValue, ...
                                'FontName', 'Helvetica', ...
                                'FontSize', 12, ...
                                'Tag', sprintf('%s%s', currResultName, obj.OutputTargetTagSuffix), ...
                                'Editable', 'off', ...
                                'Enable', isCurrResultImage, ...
                                'ValueChangedFcn', @obj.outputTargetChanged, ...
                                'Visible', 'on' );
                targetDD.Layout.Row = cnt+1;
                targetDD.Layout.Column = 2;
                
                obj.OutputTargetDD(cnt) = targetDD;
                
                % Add the Output Image Type UI Drop Down
                outputDD = uidropdown( resultsConfigUG, ...
                                'Items', obj.SupportedOutputImageExtns, ...
                                'Value', 'tiff', ...
                                'FontName', 'Helvetica', ...
                                'FontSize', 12, ...
                                'Tag', sprintf('%s%s', currResultName, obj.OutputTypeTagSuffix), ...
                                'Visible', 'off', ...
                                'Editable', 'off', ...
                                'Enable', isCurrResultImage, ...
                                'ValueChangedFcn', @obj.imageExtnChanged, ...
                                'Visible', 'on');
                outputDD.Layout.Row = cnt+1;
                outputDD.Layout.Column = 3;
                
                obj.OutputImageTypeDD(cnt) = outputDD;
            end
        end
        
        function outputTargetChanged(obj, src, eventData)
            % Update the OutputExportSelection to reflect the export
            % target.
            if eventData.Value == eventData.PreviousValue
                return;
            end
            
            % Obtain the name of the field to export
            fieldToExport = erase(src.Tag, obj.OutputTargetTagSuffix);
            
            % Obtain the handle to the OutputType DropDown for this field
            outputTypeTag = [fieldToExport obj.OutputTypeTagSuffix];
            outputTypeDropDown = findall(src.Parent, 'Tag', outputTypeTag);
            
            switch(eventData.Value)
                case 1 % Assign to workspace
                    % Update the OutputExportSelection for the specified
                    % field to wkspace
                    outputType = 'wkspace';
                    
                    % Disable the Output File type selection Drop Down
                    outputTypeDropDown.Enable = false;
                    
                case 2 % Send to file
                    % Update the OutputExportSelection for the specified
                    % field to the suitable file type
                    outputType = outputTypeDropDown.Value;
                    
                    % Enable the Output File type selection Drop Down
                    outputTypeDropDown.Enable = true;
                otherwise
                    assert(false, 'Not a valid option');
            end
            obj.OutputExportSelection.OutputFileTypes{fieldToExport} = outputType;
        end
        
        function imageExtnChanged(obj, ~, eventData)            
            % Obtain the name of the field to export
            fieldToExport = erase(eventData.Source.Tag, obj.OutputTypeTagSuffix);
            
            obj.OutputExportSelection.OutputFileTypes{fieldToExport} = eventData.Value;
        end
    end
    
end