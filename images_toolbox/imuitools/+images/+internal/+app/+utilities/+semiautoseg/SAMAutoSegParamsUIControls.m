classdef SAMAutoSegParamsUIControls < matlab.mixin.SetGetExactNames
% Class that adds the UI Controls needed to control Automatic Segmentation
% using SAM. These controls are added to an existing uipanel supplied by
% the client

    properties(Access=public, Dependent)
        ImageSize
    end

    properties(GetAccess=public, SetAccess=private, Dependent)
        % Current value of all the parameters. Clients can access this if
        % they want maintain state
        AutoSegParams
    end

    properties(GetAccess=public, SetAccess=private)
        Panel matlab.ui.container.Panel = matlab.ui.container.Panel.empty()
    end

    events
        ParamValueChanged
        UpdateSegmentationReq
        RestoreDefaultsPressed
        PointGridSizeChanged
    end

    properties(GetAccess=public, SetAccess=private)
        PanelUG matlab.ui.container.GridLayout

        ObjectAreaUG matlab.ui.container.GridLayout
        MinObjectArea matlab.ui.control.NumericEditField
        MaxObjectArea matlab.ui.control.NumericEditField

        PointsUG matlab.ui.container.GridLayout
        PointGridSize matlab.ui.control.EditField
        PointGridDSFactor matlab.ui.control.NumericEditField
        PointBatchSize matlab.ui.control.NumericEditField

        ThresholdParamsUG matlab.ui.container.GridLayout
        CropLevel matlab.ui.control.DropDown
        ScoreThreshold matlab.ui.control.NumericEditField
        StrongestThreshold matlab.ui.control.NumericEditField

        ButtonsUG matlab.ui.container.GridLayout
        RestoreDefaults matlab.ui.control.Button
        UpdateAutoSeg matlab.ui.control.Button
    end

    properties(Access=private)
        ImageSizeInternal = [0 0 0];
        PointGridSizeVal (:, 2) double = zeros(0, 2);
        DefaultParamsMgr = images.internal.app.utilities.semiautoseg.SAMAutoSegDefaultParams();
    end

    properties(Access=private, Constant)
        ButtonSize = [100 30];
        Padding = [5 5 5 5];
        NumericEFSize = [60 20];
        EFSize = [100 20];
        LabelTextSize = [200 20];
    end


    methods(Access=public)
        function obj = SAMAutoSegParamsUIControls(up)
            arguments
                up (:, :) matlab.ui.container.Panel = matlab.ui.container.Panel.empty();
            end

            if ~isempty(up)
                init(obj, up);
            end
        end

        function init(obj, up)
            arguments
                obj (1, 1) images.internal.app.utilities.semiautoseg.SAMAutoSegParamsUIControls
                up (1, 1) matlab.ui.container.Panel;
            end

            obj.Panel = up;
            layoutControls(obj);
        end

        function resetControls(obj)
            if isempty(obj.Panel)
                return;
            end

            restoreDefaultValues(obj);
            obj.RestoreDefaults.Enable = "off";
            obj.UpdateAutoSeg.Enable = "off";
        end

        function enableControls(obj)
            if ~isempty(obj.Panel)
                obj.Panel.Enable = "on";
            end
        end

        function disableControls(obj)
            if ~isempty(obj.Panel)
                obj.Panel.Enable = "off";
            end
        end
    end

    % Getters/Setters
    methods
        function sz = get.ImageSize(obj)
            sz = obj.ImageSizeInternal;
        end

        function set.ImageSize(obj, sz)
            if isempty(sz)
                obj.ImageSizeInternal = [0 0 0];
            else
                obj.ImageSizeInternal = sz;
            end

            params = obj.DefaultParamsMgr.getParams(obj.ImageSizeInternal);
            if ~isempty(obj.Panel)
                obj.MinObjectArea.Value = params.MinObjectArea;
                obj.MaxObjectArea.Value = params.MaxObjectArea;
            end
        end

        function params = get.AutoSegParams(obj)
            if isempty(obj.Panel)
                params = obj.DefaultParamsMgr.getParams(obj.ImageSize);
            else
                params = struct( "MinObjectArea", obj.MinObjectArea.Value, ...
                            "MaxObjectArea", obj.MaxObjectArea.Value, ...
                            "PointGridSize", obj.PointGridSizeVal, ...
                            "PointGridDownscaleFactor", obj.PointGridDSFactor.Value, ...
                            "PointBatchSize", obj.PointBatchSize.Value, ...
                            "NumCropLevels", obj.CropLevel.Value, ...
                            "ScoreThreshold", obj.ScoreThreshold.Value, ...
                            "SelectStrongestThreshold", obj.StrongestThreshold.Value );
            end
        end
    end

    methods(Access=private)
        function layoutControls(obj)
            objSizeHeight = 2*obj.NumericEFSize(2) + 2*obj.Padding(1) + 40;
            promptsHeight = 4*obj.NumericEFSize(2) + 2*obj.Padding(1) + 60;
            threshHeight = 2*obj.NumericEFSize(2) + 2*obj.Padding(1) + 40;
            btnHeight = obj.ButtonSize(2) + 2*obj.Padding(1);
            rowHeights = [objSizeHeight promptsHeight threshHeight btnHeight];
            obj.PanelUG = uigridlayout( obj.Panel, [4 1], ...
                            ColumnWidth ="1x", ...
                            Scrollable=true, ...
                            RowHeight=rowHeights, ...
                            Padding=obj.Padding, ...
                            Tag="PanelUG" );

            layoutObjectSizeControls(obj);
            layoutPointPromptsControls(obj);
            layoutThresholdControls(obj);
            layoutButtons(obj);
        end

        function layoutObjectSizeControls(obj)
            import images.internal.app.segmenter.image.web.getMessageString;

            up = uipanel( obj.PanelUG, ...
                    Title=getMessageString("samObjectSizeHeader"), ...
                    Tag="ObjectSizePanel", ...
                    FontWeight="bold", ...
                    Visible="on", ...
                    Scrollable=true, ...
                    BorderType="line" );
            up.Layout.Row = 1;
            up.Layout.Column = 1;

            % Object Area Section
            obj.ObjectAreaUG = uigridlayout( up, [2 2], ...
                                RowHeight=[obj.NumericEFSize(2) obj.NumericEFSize(2)], ...
                                ColumnWidth=[obj.LabelTextSize(1) obj.NumericEFSize(1)], ...
                                Scrollable=true, ...
                                Padding=obj.Padding, ...
                                Tag="ObjectAreaUG" );

            % Min Object Size
            lbl = uilabel( obj.ObjectAreaUG, ...
                    Text=getMessageString("samMinObjectArea"), ...
                    Tooltip=getMessageString("samMinObjectAreaTooltip"), ...
                    HorizontalAlignment="right", ...
                    VerticalAlignment="center" );
            lbl.Layout.Row = 1;
            lbl.Layout.Column = 1;

            obj.MinObjectArea = uieditfield( "numeric", ...
                                Parent=obj.ObjectAreaUG, ...
                                Tag="MinObjectArea", ...
                                AllowEmpty="off", ...
                                ValueDisplayFormat="%u", ...
                                Limits=[0 Inf], ...
                                UpperLimitInclusive="off", ...
                                RoundFractionalValues="on", ...
                                Value=0, ...
                                ValueChangedFcn=@(~, evt) reactToParamValueChanged(obj, evt) );
            obj.MinObjectArea.Layout.Row = 1;
            obj.MinObjectArea.Layout.Column = 2;

            % Max Object Size
            lbl = uilabel( obj.ObjectAreaUG, ...
                    Text=getMessageString("samMaxObjectArea"), ...
                    Tooltip=getMessageString("samMaxObjectAreaTooltip"), ...
                    HorizontalAlignment="right", ...
                    VerticalAlignment="center" );
            lbl.Layout.Row = 2;
            lbl.Layout.Column = 1;

            obj.MaxObjectArea = uieditfield( "numeric", ...
                                Parent=obj.ObjectAreaUG, ...
                                Tag="MaxObjectArea", ...
                                AllowEmpty="off", ...
                                ValueDisplayFormat="%u", ...
                                Limits=[0 Inf], ...
                                UpperLimitInclusive="off", ...
                                RoundFractionalValues="on", ...
                                Value = 0, ...
                                ValueChangedFcn=@(~, evt) reactToParamValueChanged(obj, evt) );
            obj.MaxObjectArea.Layout.Row = 2;
            obj.MaxObjectArea.Layout.Column = 2;
        end

        function layoutPointPromptsControls(obj)
            import images.internal.app.segmenter.image.web.getMessageString;

            up = uipanel( obj.PanelUG, ...
                    Title=getMessageString("samPointPromptsHeader"), ...
                    Tag="PointPromptsPanel", ...
                    FontWeight="bold", ...
                    Visible="on", ...
                    Scrollable=true, ...
                    BorderType="line" );
            up.Layout.Row = 2;
            up.Layout.Column = 1;

            % Point Prompts Section
            rowHeight = repmat(obj.NumericEFSize(2), [1 4]);
            obj.PointsUG = uigridlayout( up, ...
                                RowHeight=rowHeight, ...
                                ColumnWidth=[obj.LabelTextSize(1) obj.EFSize(1)], ...
                                Padding=obj.Padding, ...
                                Scrollable=true, ...
                                Tag="PointPromptsUG" );

            % Point Grid Size
            lbl = uilabel( obj.PointsUG, ...
                    Text=getMessageString("samPointGridSize"), ...
                    Tooltip=getMessageString("samPointGridSizeTooltip"), ...
                    HorizontalAlignment="right", ...
                    VerticalAlignment="center" );
            lbl.Layout.Row = 1;
            lbl.Layout.Column = 1;

            obj.PointGridSize = uieditfield( "text", ...
                                    Parent=obj.PointsUG, ...
                                    Tag="PointGridSize", ...
                                    Value=obj.DefaultParamsMgr.DefaultPointGridSizeStr, ...
                                    HorizontalAlignment="right", ...
                                    ValueChangedFcn=@(~, evt) reactToPointGridSize(obj, evt) );
            obj.PointGridSize.Layout.Row = 1;
            obj.PointGridSize.Layout.Column = 2;

            % Crop Level
            lbl = uilabel( obj.PointsUG, ...
                        Text=getMessageString("samCropLevel"), ...
                        Tooltip=getMessageString("samCropLevelTooltip"), ...
                        HorizontalAlignment="right", ...
                        VerticalAlignment="center" );
            lbl.Layout.Row = 2;
            lbl.Layout.Column = 1;

            cropLevels = ["1", "2", "3"];
            obj.CropLevel = uidropdown( obj.PointsUG, ...
                                Tag="CropLevel", ...
                                Editable="off", ...
                                Items=cropLevels, ...
                                ItemsData=str2double(cropLevels), ...
                                Value=obj.DefaultParamsMgr.DefaultCropLevel, ...
                                ValueChangedFcn=@(~, evt) reactToParamValueChanged(obj, evt) );
            obj.CropLevel.Layout.Row = 2;
            obj.CropLevel.Layout.Column = 2;

            % Point Grid Downscale Factor
            lbl = uilabel( obj.PointsUG, ...
                    Text=getMessageString("samPointGridDSFactor"), ...
                    Tooltip=getMessageString("samPointGridDSFactorTooltip"), ...
                    HorizontalAlignment="right", ...
                    VerticalAlignment="center" );
            lbl.Layout.Row = 3;
            lbl.Layout.Column = 1;

            obj.PointGridDSFactor = uieditfield( "numeric", ...
                                        Parent=obj.PointsUG, ...
                                        Tag="PointGridDSFactor", ...
                                        AllowEmpty="off", ...
                                        ValueDisplayFormat="%u", ...
                                        Limits=[1 Inf], ...
                                        UpperLimitInclusive="off", ...
                                        RoundFractionalValues="on", ...
                                        Value=obj.DefaultParamsMgr.DefaultPointGridDSFactor, ...
                                        ValueChangedFcn=@(~, evt) reactToParamValueChanged(obj, evt) );
            obj.PointGridDSFactor.Layout.Row = 3;
            obj.PointGridDSFactor.Layout.Column = 2;

            % Point Batch Size
            lbl = uilabel( obj.PointsUG, ...
                    Text=getMessageString("samPointBatchSize"), ...
                    Tooltip=getMessageString("samPointBatchSizeTooltip"), ...
                    HorizontalAlignment="right", ...
                    VerticalAlignment="center" );
            lbl.Layout.Row = 4;
            lbl.Layout.Column = 1;

            obj.PointBatchSize = uieditfield( "numeric", ...
                                    Parent=obj.PointsUG, ...
                                    Tag="PointBatchSize", ...
                                    AllowEmpty="off", ...
                                    ValueDisplayFormat="%u", ...
                                    Limits=[1 Inf], ...
                                    UpperLimitInclusive="off", ...
                                    RoundFractionalValues="on", ...
                                    Value=obj.DefaultParamsMgr.DefaultPointBatchSize, ...
                                    ValueChangedFcn=@(~, evt) reactToParamValueChanged(obj, evt) );
            obj.PointBatchSize.Layout.Row = 4;
            obj.PointBatchSize.Layout.Column = 2;
        end

        function layoutThresholdControls(obj)
            % Threshold Params Section
            import images.internal.app.segmenter.image.web.getMessageString;

            up = uipanel( obj.PanelUG, ...
                    Title=getMessageString("samThresholdHeader"), ...
                    Tag="ThresholdParamsPanel", ...
                    FontWeight="bold", ...
                    Visible="on", ...
                    Scrollable=true, ...
                    BorderType="line" );
            up.Layout.Row = 3;
            up.Layout.Column = 1;

            % Threshold Params Section
            rowHeight = repmat(obj.NumericEFSize(2), [1 2]);
            obj.ThresholdParamsUG = uigridlayout( up, ...
                                    RowHeight=rowHeight, ...
                                    ColumnWidth=[obj.LabelTextSize(1) obj.NumericEFSize(1)], ...
                                    Padding=obj.Padding, ...
                                    Scrollable=true, ...
                                    Tag="ThresholdParamsUG" );


            % Score Threshold
            lbl = uilabel( obj.ThresholdParamsUG, ...
                    Text=getMessageString("samScoreThreshold"), ...
                    Tooltip=getMessageString("samScoreThresholdTooltip"), ...
                    HorizontalAlignment="right", ...
                    VerticalAlignment="center" );
            lbl.Layout.Row = 1;
            lbl.Layout.Column = 1;

            obj.ScoreThreshold = uieditfield( "numeric", ...
                                    Parent=obj.ThresholdParamsUG, ...
                                    Tag="ScoreThreshold", ...
                                    AllowEmpty="off", ...
                                    ValueDisplayFormat="%0.3f", ...
                                    Limits=[0 1], ...
                                    LowerLimitInclusive="on", ...
                                    UpperLimitInclusive="on", ...
                                    RoundFractionalValues="off", ...
                                    Value = obj.DefaultParamsMgr.DefaultScoreThreshold, ...
                                    ValueChangedFcn=@(~, evt) reactToParamValueChanged(obj, evt) );
            obj.ScoreThreshold.Layout.Row = 1;
            obj.ScoreThreshold.Layout.Column = 2;

            % Strongest Threshold
            lbl = uilabel( obj.ThresholdParamsUG, ...
                    Text=getMessageString("samStrongestThreshold"), ...
                    Tooltip=getMessageString("samStrongestThresholdTooltip"), ...
                    HorizontalAlignment="right", ...
                    VerticalAlignment="center" );
            lbl.Layout.Row = 2;
            lbl.Layout.Column = 1;

            obj.StrongestThreshold = uieditfield( "numeric", ...
                                    Parent=obj.ThresholdParamsUG, ...
                                    Tag="StrongestThreshold", ...
                                    AllowEmpty="off", ...
                                    ValueDisplayFormat="%0.3f", ...
                                    Limits=[0 1], ...
                                    LowerLimitInclusive="on", ...
                                    UpperLimitInclusive="on", ...
                                    RoundFractionalValues="off", ...
                                    Value = obj.DefaultParamsMgr.DefaultStrongestThreshold, ...
                                    ValueChangedFcn=@(~, evt) reactToParamValueChanged(obj, evt) );
            obj.StrongestThreshold.Layout.Row = 2;
            obj.StrongestThreshold.Layout.Column = 2;
        end

        function layoutButtons(obj)
            % Buttons Section
            import images.internal.app.segmenter.image.web.getMessageString;

            up = uipanel( obj.PanelUG, ...
                    Tag="ButtonsPanel", ...
                    Visible="on", ...
                    Scrollable=true, ...
                    BorderType="none" );
            up.Layout.Row = 4;
            up.Layout.Column = 1;

            rowHeight = repmat(obj.ButtonSize(2), [1 2]);
            obj.ButtonsUG = uigridlayout( up, ...
                                    RowHeight=rowHeight, ...
                                    ColumnWidth = ["1x", "1x"], ...
                                    Padding=obj.Padding, ...
                                    Scrollable=true, ...
                                    Tag="ButtonsUG" );

            % Restore Defaults Button
            obj.RestoreDefaults = uibutton( obj.ButtonsUG, "push", ...
                    Tag="RestoreDefaults", ...
                    Text=getMessageString("samRestoreDefaults"), ...
                    FontWeight="bold", ...
                    Enable="off", ...
                    ButtonPushedFcn=@(~, ~) reactToRestoreDefaults(obj) );
            obj.RestoreDefaults.Layout.Row = 1;
            obj.RestoreDefaults.Layout.Column = 1;

            % Update Segmentation Button
            obj.UpdateAutoSeg = uibutton( obj.ButtonsUG, "push", ...
                    Tag="UpdateAutoSeg", ...
                    Text=getMessageString("samAutoSegUpdateSeg"), ...
                    FontWeight="bold", ...
                    Enable="off", ...
                    ButtonPushedFcn=@(~, ~) reactToUpdateAutoSeg(obj) );
            obj.UpdateAutoSeg.Layout.Row = 1;
            obj.UpdateAutoSeg.Layout.Column = 2;

        end
    end

    % Helpers
    methods(Access=private)
        function restoreDefaultValues(obj)
            params = obj.DefaultParamsMgr.getParams(obj.ImageSize);
            obj.MinObjectArea.Value = params.MinObjectArea;
            obj.MaxObjectArea.Value = params.MaxObjectArea;

            obj.PointGridSize.Value = "[" + strjoin(string(params.PointGridSize), " ") + "]";
            obj.PointGridSizeVal = params.PointGridSize;
            obj.PointGridDSFactor.Value = params.PointGridDownscaleFactor;
            obj.PointBatchSize.Value = params.PointBatchSize;

            obj.CropLevel.Value = params.NumCropLevels;
            obj.ScoreThreshold.Value = params.ScoreThreshold;
            obj.StrongestThreshold.Value = params.SelectStrongestThreshold;
        end
    end

    % Callbacks
    methods(Access=private)
        function reactToParamValueChanged(obj, evt)
            if evt.Value == evt.PreviousValue
                return;
            end

            obj.RestoreDefaults.Enable = "on";
            obj.UpdateAutoSeg.Enable = "on";

            notify(obj, "ParamValueChanged", evt);
        end

        function reactToPointGridSize(obj, evt)
            if strcmp(evt.Value, evt.PreviousValue)
                return;
            end

            try
                newVal = evalin("base", evt.Value);

                % This must be a 2-element row-vector
                isValid = isrow(newVal) && (numel(newVal) == 2) && ...
                            all(isfinite(newVal)) && ...
                            all(newVal > 0) && ...
                            all(floor(newVal) == newVal);
                if any(obj.ImageSize ~= 0)
                    isValid = isValid & all(newVal <= obj.ImageSize(1:2));
                end
            catch
                isValid = false;
            end

            if ~isValid
                obj.PointGridSize = evt.PreviousValue;
                obj.PointGridSizeVal = zeros(0, 2);
            else
                obj.PointGridSizeVal = newVal;

                obj.RestoreDefaults.Enable = "on";
                obj.UpdateAutoSeg.Enable = "on";
            end

            notify(obj, "PointGridSizeChanged", evt);
        end

        function reactToRestoreDefaults(obj)

            restoreDefaultValues(obj);
            obj.RestoreDefaults.Enable = "off";
            obj.UpdateAutoSeg.Enable = "on";
            notify(obj, "RestoreDefaultsPressed");
        end

        function reactToUpdateAutoSeg(obj)

            params = obj.AutoSegParams;

            obj.UpdateAutoSeg.Enable = "off";

            evtData = images.internal.app.utilities.semiautoseg.events.ToolstripEventData(params);
            notify(obj, "UpdateSegmentationReq", evtData);
        end
    end
end

% Copyright 2024 The MathWorks, Inc.